'''
Model Construction Script
'''
# Former Author: Lerbron.
# Improved By: JoeyBG.
# Date: 2025.7.24.
# Platform: Python 3.10.10, paddlepaddle 3.0.0.
# Affiliation: Beijing Institute of Technology.
# 
# Network Structure:
#   - The neural network model features a three-stage hierarchical architecture for image processing, 
#       starting with a Stem module that converts the input image $H \times W \times 3$ 
#       into a feature map $H/8 \times W/8 \times C_1$. 
#       Each stage employs multiple SBCFormer Blocks that combine local feature extraction through a Mixer-GELU module 
#       and global feature extraction via a multi-head attention (MAttn) mechanism, which includes projection, convolution, 
#       and attention operations to integrate local and global contexts. The model progressively downsamples the feature maps 
#       in subsequent stages to $H/16 \times W/16 \times C_2$ and $H/32 \times W/32 \times C_3$, 
#       enhancing feature depth while reducing spatial resolution. 
#       The final output is generated by applying Global Pooling to the last stage's feature map, followed by a Linear layer, 
#       enabling the model to effectively capture multi-scale representations for tasks requiring detailed image understanding.
#
# Modules Description:
#   - Stem: A convolutional block that downsamples the input image and extracts initial features.
#   - SBCFormer Block: A block that combines local and global feature extraction.
#   - Global Pooling: A pooling operation that aggregates feature maps across the spatial dimensions.
#   - Linear: A fully connected layer for classification.
#   - MAttn: Multi-head attention mechanism for global feature extraction.
#   - Mixer-GELU: A combination of convolution and GELU activation for local feature extraction.
#   - Conv2d: A convolutional layer for local feature extraction.
#   - GELU: A non-linear activation function.
#
# Usage:
#   - This script can be used to train and evaluate a recognition model for radar-based HMDD tasks. 
#   - The model can be integrated with radar signal processing algorithms to extract human motion direction from radar data.
#
# Dataset Used:
#   - The model is trained and evaluated using the Radar_Based_HMDD_8Classes_XX datasets. 
#       Dataset path: data/data350917/Feature_Enhanced_Dataset_OS.zip.
#   - The datasets are preprocessed and feature-augmented to match the input requirements of this model.
#   - Make sure the size of the input image matches the first layer of network and the number of classes is set to 8.

# Import necessary libraries.
import paddle
from paddle import nn
import paddle.nn.functional as F
import itertools

# Drop path module.
def drop_path(x, drop_prob=0.0, training=False):
    """
    Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).
    This is a technique to improve model generalization by randomly dropping paths during training.
    """
    if drop_prob == 0.0 or not training:
        return x
    keep_prob = paddle.to_tensor(1 - drop_prob)
    shape = (paddle.shape(x)[0],) + (1,) * (x.ndim - 1)
    random_tensor = keep_prob + paddle.rand(shape, dtype=x.dtype)
    random_tensor = paddle.floor(random_tensor)  # Binarize
    output = x.divide(keep_prob) * random_tensor
    return output

class DropPath(nn.Layer):
    """
    DropPath layer for stochastic depth.
    """
    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        """
        Apply drop path to the input tensor x.
        """
        return drop_path(x, self.drop_prob, self.training)

# H_Sigmoid activation function.
class h_sigmoid(nn.Layer):
    """
    A custom sigmoid-like activation function using ReLU6.
    """
    def __init__(self):
        super(h_sigmoid, self).__init__()
        self.relu = nn.ReLU6()

    def forward(self, x):
        """
        Compute h_sigmoid activation: relu6(x + 3) / 6
        """
        return self.relu(x + 3) / 6

# Convolutional 2D batch normalization layer.
class Conv2d_BN(nn.Layer):
    """
    A convolutional layer followed by batch normalization.
    """
    def __init__(self, in_features, out_features=None, kernel_size=3, stride=1, padding=0, dilation=1,
                 groups=1, bn_weight_init=1):
        super().__init__()
        self.conv = nn.Conv2D(in_features, out_features, kernel_size, stride, padding, dilation, groups, bias_attr=False)
        self.bn = nn.BatchNorm2D(out_features)

        # Initialize batch norm weight to bn_weight_init and bias to 0.
        c = nn.initializer.Constant(bn_weight_init)
        zero = nn.initializer.Constant(0.0)
        c(self.bn.weight)
        zero(self.bn.bias)
    
    def forward(self, x):
        """
        Apply convolution followed by batch normalization.
        """
        x = self.conv(x)
        x = self.bn(x)
        return x

# MLP module.
class Mlp(nn.Layer):
    """
    A multi-layer perceptron (MLP) module with two fully connected layers and an activation function.
    """
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        """
        Apply the MLP: fc1 -> activation -> dropout -> fc2 -> dropout
        """
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x

# Residual module.
class InvertResidualBlock(nn.Layer):
    """
    An inverted residual block, similar to those in MobileNetV2.
    """
    def __init__(self, in_features, hidden_features=None, out_features=None, kernel_size=3, act_layer=nn.GELU, drop_path=0.):
        super().__init__()
        self.in_features = in_features
        self.out_features = out_features or in_features
        self.hidden_features = hidden_features or in_features

        self.pwconv1_bn = Conv2d_BN(self.in_features, self.hidden_features, kernel_size=1, stride=1, padding=0)
        self.dwconv_bn = Conv2d_BN(self.hidden_features, self.hidden_features, kernel_size=3, stride=1, padding=1, groups=self.hidden_features)
        self.pwconv2_bn = Conv2d_BN(self.hidden_features, self.in_features, kernel_size=1, stride=1, padding=0)

        self.act = act_layer()
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()

    def forward(self, x):
        """
        Apply the inverted residual block with a residual connection.
        """
        x1 = self.pwconv1_bn(x)
        x1 = self.act(x1)
        x1 = self.dwconv_bn(x1)
        x1 = self.act(x1)
        x1 = self.pwconv2_bn(x1)
        return x + self.drop_path(x1)

# MAttn module.
class Attention(nn.Layer):
    """
    Multi-head attention mechanism with relative position encoding.
    """
    def __init__(self, dim=384, key_dim=32, num_heads=8, attn_ratio=2, resolution=7):
        super().__init__()
        self.resolution = resolution
        self.key_dim = key_dim
        self.num_heads = num_heads
        self.attn_ratio = attn_ratio
        self.scale = key_dim ** -0.5
        
        self.nh_kd = key_dim * num_heads
        self.qk_dim = 2 * self.nh_kd
        self.v_dim = int(attn_ratio * key_dim) * num_heads
        dim_h = self.v_dim + self.qk_dim

        self.N = resolution ** 2
        self.N2 = self.N
        self.pwconv = nn.Conv2D(dim, dim_h, kernel_size=1, stride=1, padding=0)
        self.dwconv = Conv2d_BN(self.v_dim, self.v_dim, kernel_size=3, stride=1, padding=1, groups=self.v_dim)
        self.proj_out = nn.Linear(self.v_dim, dim)
        self.act = nn.GELU()

        # Relative position encoding.
        points = list(itertools.product(range(self.resolution), range(self.resolution)))
        N = len(points)
        self.N = N
        attention_offsets = {}
        idxs = []
        for p1 in points:
            for p2 in points:
                offset = (abs(p1[0] - p2[0]), abs(p1[1] - p2[1]))
                if offset not in attention_offsets:
                    attention_offsets[offset] = len(attention_offsets)
                idxs.append(attention_offsets[offset])
        self.attention_biases = self.create_parameter((len(attention_offsets), num_heads), default_initializer=nn.initializer.Constant(0.0))
        self.attention_bias_idxs = idxs

    def forward(self, x):
        """
        Compute multi-head attention with relative position encoding.
        """
        B, N, C = x.shape
        h, w = self.resolution, self.resolution
        x = x.transpose([0, 2, 1]).reshape((B, C, h, w))

        x = self.pwconv(x)
        qk, v1 = paddle.split(x, [self.qk_dim, self.v_dim], axis=1)
        qk = qk.reshape((B, 2, self.num_heads, self.key_dim, N)).transpose([1, 0, 2, 4, 3])
        q, k = qk[0], qk[1]

        v1 = v1 + self.act(self.dwconv(v1))
        v = v1.reshape((B, self.num_heads, -1, N)).transpose([0, 1, 3, 2])

        attn = (q @ k.transpose((0, 1, 3, 2))) * self.scale
        attn = attn + self.attention_biases[self.attention_bias_idxs].transpose((1, 0)).reshape((1, self.num_heads, self.N, self.N))
        attn = F.softmax(attn, axis=-1)
        x = (attn @ v).transpose([0, 2, 1, 3]).reshape((B, N, self.v_dim))
        x = self.proj_out(x)
        return x

# Modified transformer module.
class ModifiedTransformer(nn.Layer):  
    """
    A modified Transformer block that includes attention and MLP with residual connections.
    """
    def __init__(self, dim, key_dim, num_heads, mlp_ratio=4., attn_ratio=2, drop=0., attn_drop=0., drop_path=0., act_layer=nn.GELU, resolution=7):
        super().__init__()
        self.resolution = resolution
        self.dim = dim
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()

        self.attn = Attention(dim=self.dim, key_dim=key_dim, num_heads=num_heads, attn_ratio=attn_ratio, resolution=resolution)
        self.norm1 = nn.LayerNorm(dim, epsilon=1e-6)

        self.mlp = Mlp(in_features=self.dim, hidden_features=self.dim*mlp_ratio, out_features=self.dim, act_layer=act_layer, drop=drop)
        self.norm2 = nn.LayerNorm(dim, epsilon=1e-6)

    def forward(self, x):
        """
        Apply attention and MLP with residual connections.
        """
        x = x + self.drop_path(self.attn(self.norm1(x)))
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x

# Main structure of the SBCFormer block.
class SBCFormerBlock(nn.Layer):  
    """
    The main block of the SBCFormer model, combining local and global feature extraction.
    """
    def __init__(self, depth_invres, depth_mattn, depth_mixer, dim, key_dim, num_heads, mlp_ratio=4., attn_ratio=2, drop=0., attn_drop=0.,
                 drop_paths=[], act_layer=nn.GELU, pool_ratio=1, invres_ratio=1, resolution=7):
        super().__init__()
        self.resolution = resolution
        self.dim = dim
        self.depth_invres = depth_invres
        self.depth_mattn = depth_mattn
        self.depth_mixer = depth_mixer
        self.act = h_sigmoid()

        # Inverted residual blocks.
        self.invres_blocks = nn.Sequential()
        for k in range(self.depth_invres):
            self.invres_blocks.add_sublayer("InvRes_{0}".format(k), InvertResidualBlock(in_features=dim, hidden_features=int(dim*invres_ratio), out_features=dim, kernel_size=3, drop_path=0.))

        self.pool_ratio = pool_ratio
        if self.pool_ratio > 1:
            self.pool = nn.AvgPool2D(pool_ratio, pool_ratio)
            self.convTrans = nn.Conv2DTranspose(dim, dim, kernel_size=pool_ratio, stride=pool_ratio, groups=dim)
            self.norm = nn.BatchNorm2D(dim)
        else:
            self.pool = nn.Identity()
            self.convTrans = nn.Identity()
            self.norm = nn.Identity()
        
        # Mixer blocks.
        self.mixer = nn.Sequential()
        for k in range(self.depth_mixer):
            self.mixer.add_sublayer("Mixer_{0}".format(k), InvertResidualBlock(in_features=dim, hidden_features=dim*2, out_features=dim, kernel_size=3, drop_path=0.))
        
        # Transformer blocks.
        self.trans_blocks = nn.Sequential()
        for k in range(self.depth_mattn):
            self.trans_blocks.add_sublayer("MAttn_{0}".format(k), ModifiedTransformer(dim=dim, key_dim=key_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, attn_ratio=attn_ratio,
             drop=drop, attn_drop=attn_drop, drop_path=drop_paths[k], resolution=resolution))
        
        self.proj = Conv2d_BN(self.dim, self.dim, kernel_size=1, stride=1, padding=0)
        self.proj_fuse = Conv2d_BN(self.dim*2, self.dim, kernel_size=1, stride=1, padding=0)
        
    def forward(self, x):
        """
        Forward pass of the SBCFormer block.
        """
        B, C, _, _ = x.shape
        h, w = self.resolution, self.resolution
        x = self.invres_blocks(x)
        local_fea = x

        if self.pool_ratio > 1:
            x = self.pool(x)
        
        x = self.mixer(x)
        x = x.flatten(2).transpose([0, 2, 1])
        x = self.trans_blocks(x)
        x = x.transpose([0, 2, 1]).reshape((B, C, h, w))

        if self.pool_ratio > 1:
            x = self.convTrans(x)
            x = self.norm(x)
        global_act = self.act(self.proj(x))
        x_ = local_fea * global_act
        x_cat = paddle.concat((x, x_), axis=1)
        out = self.proj_fuse(x_cat)

        return out

# Patch merging module.
class PatchMerging(nn.Layer):
    """
    Patch merging layer to downsample the feature map.
    """
    def __init__(self, in_features, out_features):
        super().__init__()
        self.norm = nn.BatchNorm2D(out_features)
        self.conv = nn.Conv2D(in_channels=in_features, out_channels=out_features, kernel_size=3, stride=2, padding=1, bias_attr=False)

    def forward(self, x):
        """
        Apply convolution with stride 2.
        """
        x = self.conv(x)
        x = self.norm(x)
        return x

# Patch embedding module.
class PatchEmbed(nn.Layer):
    """
    Patch embedding layer to convert image to patch embeddings.
    """
    def __init__(self, img_size=224, in_chans=3, embed_dim=64):
        super().__init__()
        self.embed_dim = embed_dim        
        self.stem = nn.Sequential(
                            Conv2d_BN(in_features=in_chans, out_features=self.embed_dim//4, kernel_size=3, stride=2, padding=1),
                            nn.ReLU(),
                            Conv2d_BN(in_features=self.embed_dim//4, out_features=self.embed_dim//2, kernel_size=3, stride=2, padding=1),
                            nn.ReLU(),
                            Conv2d_BN(in_features=self.embed_dim//2, out_features=self.embed_dim, kernel_size=3, stride=2, padding=1),
                            nn.ReLU())

    def forward(self, x):
        """
        Apply stem convolutions.
        """
        x = self.stem(x)
        return x

# SBCFormer network construction.
class SBCFormer(nn.Layer):
    """
    SBCFormer model for image processing tasks.
    """
    def __init__(self, img_size=224, in_chans=3, num_classes=1000, embed_dims=[128,320,512], key_dim=32, num_heads=[2,4,8], attn_ratio=2, mlp_ratio=4, invres_ratio=2,
                drop_rate=0., attn_drop_rate=0., drop_path_rate=0., depths_invres=[2,2,1], depths_mattn=[1,4,3], depths_mixer=[2,2,2], pool_ratios=[4,2,1]):
        super().__init__()
        self.num_classes = num_classes
        self.embed_dims = embed_dims
        self.num_heads = num_heads
        self.depths_invres = depths_invres
        self.depths_mattn = depths_mattn
        self.depths_mixer = depths_mixer
        self.num_stages = len(self.embed_dims)

        self.merging_blocks = nn.LayerList()
        self.sbcformer_blocks = nn.LayerList()

        self.patch_embed = PatchEmbed(img_size=img_size, in_chans=in_chans, embed_dim=self.embed_dims[0])
        self.merging_blocks.append(self.patch_embed)
        for i in range(self.num_stages-1):
            self.merging_blocks.append(PatchMerging(in_features=self.embed_dims[i], out_features=self.embed_dims[i+1]))

        self.dpr = [x.item() for x in paddle.linspace(0, drop_path_rate, sum(self.depths_mattn))]  # Stochastic depth decay rule.
        cur = 0
        for i in range(self.num_stages):
            self.sbcformer_blk = SBCFormerBlock(depth_invres=self.depths_invres[i], depth_mattn=self.depths_mattn[i], depth_mixer=self.depths_mixer[i], dim=self.embed_dims[i], key_dim=key_dim, num_heads=self.num_heads[i],
                    mlp_ratio=mlp_ratio, attn_ratio=attn_ratio, drop=drop_rate, attn_drop=attn_drop_rate, drop_paths=self.dpr[cur:cur + self.depths_mattn[i]], pool_ratio=pool_ratios[i], invres_ratio=invres_ratio) 
            cur += self.depths_mattn[i]
            self.sbcformer_blocks.append(self.sbcformer_blk)
        
        # Classification head.
        self.norm = nn.LayerNorm(embed_dims[-1], epsilon=1e-6)
        self.head = nn.Linear(embed_dims[-1], num_classes) if num_classes > 0 else nn.Identity()

        # Init weights.
        self.apply(self._init_weights)
    
    def _init_weights(self, m):
        """
        Initialize weights.
        """
        tn = nn.initializer.TruncatedNormal(std=.02)
        zero = nn.initializer.Constant(0.0)
        one = nn.initializer.Constant(1.0)
        kaiming = nn.initializer.KaimingNormal()
        if isinstance(m, nn.Linear):
            tn(m.weight)
            if m.bias is not None:
                zero(m.bias)
        elif isinstance(m, nn.LayerNorm):
            zero(m.bias)
            one(m.weight)
        elif isinstance(m, nn.Conv2D):
            kaiming(m.weight)
            if m.bias is not None:
                zero(m.bias)
        elif isinstance(m, nn.BatchNorm2D):
            one(m.weight)
            zero(m.bias)

    def forward_features(self, x):
        """
        Forward pass through feature extraction stages.
        """
        for i in range(self.num_stages):
            x = self.merging_blocks[i](x)
            x = self.sbcformer_blocks[i](x)
        return x

    def forward(self, x):
        """
        Forward pass of the model.
        """
        x = self.forward_features(x)
        x = self.norm(x.mean([-2, -1]))  # Global average pooling.
        x = self.head(x)
        return x

# SBCFormer network structure in XS version.
def SBCFormer_XS(pretrained=False, **kwargs):
    """
    Create SBCFormer XS model.
    """
    model = SBCFormer(
        img_size=224, embed_dims=[96, 160, 288], key_dim=16, num_heads=[3, 5, 6], invres_ratio=2, attn_ratio=2, pool_ratios=[4, 2, 1],
        depths_invres=[2, 2, 1], depths_mattn=[2, 3, 2], depths_mixer=[2, 2, 2], **kwargs)
    return model

# SBCFormer network structure in S version.
def SBCFormer_S(pretrained=False, **kwargs): 
    """
    Create SBCFormer S model.
    """
    model = SBCFormer(
        img_size=224, embed_dims=[96, 192, 320], key_dim=16, num_heads=[3, 5, 7], invres_ratio=2, attn_ratio=2, pool_ratios=[4, 2, 1],
        depths_invres=[2, 2, 1], depths_mattn=[2, 4, 3], depths_mixer=[2, 2, 2], **kwargs)
    return model

# SBCFormer network structure in basic version.
def SBCFormer_B(pretrained=False, **kwargs):
    """
    Create SBCFormer B model.
    """
    model = SBCFormer(
        img_size=224, embed_dims=[128, 256, 384], key_dim=24, num_heads=[4, 6, 8], invres_ratio=2, attn_ratio=2, pool_ratios=[4, 2, 1],
        depths_invres=[2, 2, 1], depths_mattn=[2, 4, 3], depths_mixer=[2, 2, 2], **kwargs)
    return model

# SBCFormer network structure in large version.
def SBCFormer_L(pretrained=False, **kwargs):
    """
    Create SBCFormer L model.
    """
    model = SBCFormer(
        img_size=224, embed_dims=[192, 288, 384], key_dim=32, num_heads=[4, 6, 8], invres_ratio=4, attn_ratio=2, pool_ratios=[4, 2, 1],
        depths_invres=[2, 2, 1], depths_mattn=[2, 4, 3], depths_mixer=[2, 2, 2], **kwargs)
    return model

# For default setting, using XS version of the SBCFormer.
if __name__ == "__main__":
    model = SBCFormer_XS()
    paddle.summary(model, (1, 3, 224, 224))
